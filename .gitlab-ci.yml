# global default image
image: node:latest

cache:
  key: "${CI_COMMIT_REF_SLUG}-${CI_JOB_STAGE}"
  paths:
    - ${CI_PROJECT_DIR}/.cache/npm
    - ${CI_PROJECT_DIR}/.cache/electron
    - ${CI_PROJECT_DIR}/.cache/Cypress

stages:
  - audit
  - lint
  - test

# global defaults
variables:
  NODE_ENV: "test"
  npm_config_cache: ${CI_PROJECT_DIR}/.cache/npm
  ELECTRON_CACHE: ${CI_PROJECT_DIR}/.cache/electron
  CYPRESS_CACHE_FOLDER: ${CI_PROJECT_DIR}/.cache/Cypress
  CYPRESS_INSTALL_BINARY: "0"
  CORE_PACKAGES: "@salp/{frontend,application}"

before_script:
  - npm ci
  - npm run postinstall --unsafe-perm

# jobs
eslint:core:
  stage: lint
  variables:
    LERNA_ARGS: --ignore-prepublish
  script:
    - npx lerna run lint --no-bail --scope=$CORE_PACKAGES -- -- --no-fix

eslint:packages:
  stage: lint
  variables:
    LERNA_ARGS: --ignore-prepublish
  script:
    - npx lerna run lint --no-bail --ignore=$CORE_PACKAGES -- -- --no-fix

stylelint:frontend:
  stage: lint
  variables:
    LERNA_ARGS: --ignore-prepublish
  script:
    - cd src/frontend/
    - npm run lint:style

test:unit:frontend:
  stage: test
  script:
    - cd src/frontend/
    - npm run coverage:unit
  coverage: '/^Statements\s*:\s*([^%]+)/'
  artifacts:
    paths:
      - src/frontend/coverage/

test:unit:application:
  image: node:11.6
  stage: test
  script:
    - cd src/application/
    - npm run coverage:unit
  coverage: '/^Statements\s*:\s*([^%]+)/'
  artifacts:
    paths:
      - src/application/coverage/

test:unit:packages:
  stage: test
  script:
    - npx lerna run test --no-bail --ignore=$CORE_PACKAGES

test:e2e:frontend:production: &test_e2e_frontend
  image: cypress/base:10
  stage: test
  variables:
    CYPRESS_INSTALL_BINARY: ""
    RUNTIME_NODE_ENV: "production"
    COMPILE_MODE: "production"
  script:
    - cd src/frontend/
    - NODE_ENV="RUNTIME_NODE_ENV" npm run test:e2e -- --mode $COMPILE_MODE
  artifacts:
    expire_in: 1 day
    when: always
    paths:
    - src/frontend/tests/e2e/renderer/screenshots
    - src/frontend/tests/e2e/renderer/videos

test:e2e:frontend:development:
  <<: *test_e2e_frontend
  variables:
    CYPRESS_INSTALL_BINARY: ""
    RUNTIME_NODE_ENV: "production"
    COMPILE_MODE: "development"

npm_audit:
  stage: audit
  only:
    - schedules
  before_script:
    - npm ci
  script:
    - npm audit
    - ./scripts/npm-audit-packages.js

dependency_scanning:
  stage: audit
  only:
    - schedules
  image: docker:stable
  tags:
    - dind
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  before_script:
    - 'true'
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --env CYPRESS_INSTALL_BINARY="0"
        --env ELECTRON_CACHE="/code/.cache/electron"
        --volume "${CI_PROJECT_DIR}:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
